# Generated by Django 2.2.4 on 2020-08-11 15:17

from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import stdimage.models
import usuario.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nome', models.CharField(max_length=100, verbose_name='Nome')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='E-mail')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', usuario.models.UsuarioManager()),
            ],
        ),
        migrations.CreateModel(
            name='Instituicoes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, verbose_name='Nome')),
                ('sigla', models.CharField(max_length=10, verbose_name='Sigla')),
                ('cidade', models.CharField(max_length=70, verbose_name='Cidade')),
                ('estado', models.CharField(max_length=50, verbose_name='Estado')),
                ('natureza', models.CharField(choices=[('PU', 'Público'), ('PR', 'Privado')], max_length=2, null=True, verbose_name='Natureza')),
                ('tipo_de_instituicao', models.CharField(choices=[('EN', 'Ensino'), ('CD', 'Centro de Documentação'), ('CA', 'Cartório')], max_length=3, null=True, verbose_name='Tipo de instituição')),
                ('tipo_de_poder', models.CharField(choices=[('EXE', 'Executivo'), ('LEG', 'Legislativo'), ('JUD', 'Judiciário'), ('PR', 'Privado')], max_length=4, null=True, verbose_name='Tipo de poder')),
            ],
        ),
        migrations.CreateModel(
            name='UsuarioComum',
            fields=[
                ('usuario_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('salvar_instituicao', models.CharField(max_length=100, verbose_name='Instituição')),
                ('cpf', models.CharField(max_length=11, verbose_name='CPF')),
                ('rg', models.CharField(max_length=11, verbose_name='RG')),
                ('rg_expedidor', models.CharField(max_length=4, verbose_name='Orgão expedidor')),
                ('lattes', models.TextField(verbose_name='Lattes')),
                ('foto', stdimage.models.StdImageField(upload_to='pesquisador', verbose_name='Foto')),
                ('telefone', models.CharField(max_length=11, verbose_name='Telefone')),
                ('validar_email', models.EmailField(max_length=254, verbose_name='E-mail')),
                ('campo', models.BooleanField(default=False, verbose_name='Validar E-mail')),
                ('tipo_de_usuario', models.CharField(choices=[('PE', 'Pesquisador'), ('BO', 'Bolsista')], max_length=2, null=True)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            bases=('usuario.usuario',),
            managers=[
                ('objects', usuario.models.UsuarioManager()),
            ],
        ),
        migrations.CreateModel(
            name='Vinculacao',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo_vinculacao', models.CharField(max_length=50, verbose_name='Tipo de vinculação')),
                ('matricula', models.CharField(max_length=20, verbose_name='Matricula')),
                ('curso', models.CharField(max_length=100, verbose_name='Curso')),
                ('instituicao', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='usuario.Instituicoes')),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='usuario.UsuarioComum')),
            ],
        ),
    ]
